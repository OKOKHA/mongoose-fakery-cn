0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.2.11
3 info using node@v0.8.20
4 verbose publish [ '.' ]
5 verbose read json /Users/alexis/work/mongoose-fakery/package.json
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { pathname: '.', path: '.', href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/alexis/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
14 verbose folder .
15 info prepublish mongoose-fakery@0.1.3
16 silly lockFile 3a52ce78- .
17 verbose lock . /Users/alexis/.npm/3a52ce78-.lock
18 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
19 verbose lock /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz /Users/alexis/.npm/5c7590fb-60921-0-8742918577045202-tmp-tgz.lock
20 silly lockFile 3a52ce78- .
21 silly lockFile 3a52ce78- .
22 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
23 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
24 verbose tar unpack /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
25 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
26 verbose lock /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package /Users/alexis/.npm/ee48553d-60921-0-8742918577045202-package.lock
27 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
28 verbose lock /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz /Users/alexis/.npm/5c7590fb-60921-0-8742918577045202-tmp-tgz.lock
29 silly gunzTarPerm modes [ '755', '644' ]
30 silly gunzTarPerm extractEntry package.json
31 silly gunzTarPerm extractEntry .npmignore
32 silly gunzTarPerm extractEntry README.md
33 silly gunzTarPerm extractEntry LICENSE
34 silly gunzTarPerm extractEntry index.js
35 silly gunzTarPerm extractEntry lib/data.js
36 silly gunzTarPerm extractEntry lib/data_providers.js
37 silly gunzTarPerm extractEntry lib/fakery.js
38 silly gunzTarPerm extractEntry lib/helpers.js
39 silly gunzTarPerm extractEntry Makefile
40 silly gunzTarPerm extractEntry test/data_provider_tests.js
41 silly gunzTarPerm extractEntry test/fakery_tests.js
42 verbose read json /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package/package.json
43 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
44 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
45 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
46 silly lockFile 5c7590fb-60921-0-8742918577045202-tmp-tgz /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/tmp.tgz
47 verbose from cache /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package/package.json
48 verbose tar pack [ '/Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz',
48 verbose tar pack   '/var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package' ]
49 verbose tarball /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
50 verbose folder /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
51 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
52 verbose lock /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package /Users/alexis/.npm/ee48553d-60921-0-8742918577045202-package.lock
53 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
54 verbose lock /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz /Users/alexis/.npm/dbbe5c3e-ongoose-fakery-0-1-3-package-tgz.lock
55 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
56 silly lockFile ee48553d-60921-0-8742918577045202-package /var/folders/yc/t7wrdqns6j5129st1s8ww1m40000gn/T/npm-5076/1364260760921-0.8742918577045202/package
57 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
58 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
59 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
60 verbose lock /Users/alexis/.npm/mongoose-fakery/0.1.3/package /Users/alexis/.npm/1c9f5932-pm-mongoose-fakery-0-1-3-package.lock
61 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
62 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
63 verbose tar unpack /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
64 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
65 verbose lock /Users/alexis/.npm/mongoose-fakery/0.1.3/package /Users/alexis/.npm/1c9f5932-pm-mongoose-fakery-0-1-3-package.lock
66 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
67 verbose lock /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz /Users/alexis/.npm/dbbe5c3e-ongoose-fakery-0-1-3-package-tgz.lock
68 silly gunzTarPerm modes [ '755', '644' ]
69 silly gunzTarPerm extractEntry package.json
70 silly gunzTarPerm extractEntry .npmignore
71 silly gunzTarPerm extractEntry README.md
72 silly gunzTarPerm extractEntry LICENSE
73 silly gunzTarPerm extractEntry index.js
74 silly gunzTarPerm extractEntry lib/data.js
75 silly gunzTarPerm extractEntry lib/data_providers.js
76 silly gunzTarPerm extractEntry lib/fakery.js
77 silly gunzTarPerm extractEntry lib/helpers.js
78 silly gunzTarPerm extractEntry Makefile
79 silly gunzTarPerm extractEntry test/data_provider_tests.js
80 silly gunzTarPerm extractEntry test/fakery_tests.js
81 verbose read json /Users/alexis/.npm/mongoose-fakery/0.1.3/package/package.json
82 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
83 silly lockFile 1c9f5932-pm-mongoose-fakery-0-1-3-package /Users/alexis/.npm/mongoose-fakery/0.1.3/package
84 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
85 silly lockFile dbbe5c3e-ongoose-fakery-0-1-3-package-tgz /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
86 silly shasum updated bytes 9647
87 info shasum 962f82334e42e6e271d5be83fb567e71bf9da8bc
87 info shasum /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz
88 verbose from cache /Users/alexis/.npm/mongoose-fakery/0.1.3/package/package.json
89 verbose chmod /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz 644
90 verbose chown /Users/alexis/.npm/mongoose-fakery/0.1.3/package.tgz [ 501, 20 ]
91 silly lockFile 3a52ce78- .
92 silly publish { name: 'mongoose-fakery',
92 silly publish   version: '0.1.3',
92 silly publish   description: 'Fixtures replacement and random data generator for mongoose.',
92 silly publish   main: 'index.js',
92 silly publish   scripts: { test: 'make test' },
92 silly publish   repository:
92 silly publish    { type: 'git',
92 silly publish      url: 'git@github.com:alexmic/mongoose-fakery.git' },
92 silly publish   keywords:
92 silly publish    [ 'mongoose',
92 silly publish      'testing',
92 silly publish      'random',
92 silly publish      'data',
92 silly publish      'generator',
92 silly publish      'fixtures',
92 silly publish      'stub',
92 silly publish      'unit' ],
92 silly publish   author: { name: 'Alex Michael' },
92 silly publish   license: 'MIT',
92 silly publish   devDependencies: { chai: '1.5.x', mocha: '1.8.x', mongoose: '3.6.0' },
92 silly publish   readme: '# mongoose-fakery\n\n# NOT READY FOR PRIMETIME YET\n\n`mongoose-fakery` provides an easy fixture replacement method and random data generators.\n\n## Inspiration\n\nParts of `mongoose-fakery` where inspired by:\n* [factory-boy](https://github.com/dnerdy/factory_boy)\n* [factory-lady](https://github.com/petejkim/factory-lady)\n* [faker](https://github.com/marak/Faker.js/)\n\nThanks.\n\n## Contributing\n\n1. Clone the repo.\n2. Create a branch.\n3. Write awesome code.\n4. Add tests for your changes. Test dependencies are defined in `package.json`.\n5. Open a Pull Request.\n6. Receive a \'Thanks!\' and possibly a digital beer from me.\n\n## License\n\nMIT.\n\n## TODO\n\n1. Associations with other models. This is my first priority.\n2. Browser compatibility.\n3. Add more data generators.\n\n## Documentation\n\n### Installing\n\n```js\nnpm install mongoose-fakery\n```\n\n### Creating a fakery (factory)\n\nIn your `models.js`:\n```js\nvar mongoose = require(\'mongoose\')\n  , Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n    name: String,\n    surname: String\n});\n\nmongoose.model(\'User\', UserSchema);\n```\n\nIn your tests or fixture files:\n```js\nvar fakery = require(\'mongoose-fakery\');\n\nfakery.fake(\'user\', mongoose.model(\'User\'), {\n    name: \'john\',\n    surname: \'doe\'\n});\n```\n\n### Getting a fakery\n\nIf the only argument you pass into `fake()` is the name of the factory then\nthe method becomes a getter.\n\n```js\nvar userFakery = fakery.fake(\'user\');\n```\n\n### Lazy attributes\n\n\'Lazy\' attributes are attributes that are resolved during a \'second\' pass over\nthe attributes of the fakery. Common usage are attributes that depend\non other attributes for their value.\n\nTo create a \'lazy\' attribute use `fakery.lazy()`:\n```js\nfakery.fake(\'user\', mongoose.model(\'User\'), {\n    name: \'john\',\n    surname: \'doe\',\n    email: fakery.lazy(function(attrs) {\n        // this will return john@example.com\n        return attrs.name + \'@example.com\';\n    });\n});\n```\n\nEach lazy attribute receives all the resolved attributes of the first pass as\nthe only parameter.\n\n### Using data generators\n\nData generators are functions that return data. That data can be random or follow\nspecific patterns. `mongoose-fakery` comes with a number of pre-defined data generators\nwhich will probably suit most of your needs i.e:\n\n1. random strings (hex, alpha, alphanum)\n2. random numbers\n3. random booleans (true/false)\n4. lorem generator\n5. name, surname and gender\n6. picking random items from lists\n\nPre-defined data generators are exposed under the `g` attribute of the `fakery`\nobject. Take a look in `data_providers.js` to see all the available generators\nand their APIs.\n\nSome examples:\n\n```js\n// using the user model defined above\nfakery.fake(\'user\', mongoose.model(\'User\'), {\n    name: fakery.g.name(),\n    surname: fakery.g.surname()\n});\n```\n\nGenerators can also be used in arrays and nested attributes:\n\n```js\nfakery.fake(\'post\', mongoose.model(\'Post\'), {\n    name: fakery.g.name(),\n    // this will create tags \'projects\', <random string>, \'tech\'\n    tags: [\'projects\', fakery.g.str(5), \'tech\']\n});\n```\n\nData generators can also be used when you just want to generate a bunch of random\ndata for whatever purpose. They are not specific to test factories:\n\n```js\nvar fakery = require(\'mongoose-fakery\');\n\n// generate 10 random full names\nvar names = [], i;\nfor (i = 0; i < 10; i++) {\n    names.push(fakery.g.fullname());\n}\n```\n\n### Creating custom data generators\n\n`mongoose-fakery` gives you the option to create custom generators that attach\nthemselves to the `g` attribute to the `fakery` object:\n\n```js\n// declare like this\nfakery.generator(\'custom\', function() {\n    return \'custom\';\n});\n\n// use like this\nvar customGenerator = fakery.g.custom();\ncustomGenerator(); // returns \'custom\'\n```\n\nAs you might have guessed, generators wrap \'data provider\' methods in a function.\nYou can thus do things like:\n\n```js\nfakery.generator(\'timesTwo\', function(n) {\n    return n*2;\n});\n\nvar timesTwo = fakery.g.timesTwo();\ntimesTwo(2); // returns 4\n```\n\n### Making a fake model\n\nTo make a fake model, use the `make()` method. `make()` can also receive overrides.\n\n```js\nvar model = fakery.make(\'user\');\nvar modelWithOverrides = fakery.make(\'user\', {\n    name: \'override\'\n});\n```\n\nNote that the model is *not* saved to the database.\n\n### Making & saving a fake model\n\nTo make and save a fake model, use the `makeAndSave()` method.\n\n```js\nfakery.makeAndSave(\'user\', function(err, user) {\n    // `user` is saved to the database at this point\n});\n\nfakery.makeAndSave(\'user\', {name: \'override\'}, function(err, user) {\n    // `user` is saved to the database and name is overriden to \'override\'.\n});\n```',
92 silly publish   readmeFilename: 'README.md',
92 silly publish   _id: 'mongoose-fakery@0.1.3',
92 silly publish   dist: { shasum: '962f82334e42e6e271d5be83fb567e71bf9da8bc' },
92 silly publish   _from: '.' }
93 verbose url raw mongoose-fakery
94 verbose url resolving [ 'https://registry.npmjs.org/', './mongoose-fakery' ]
95 verbose url resolved https://registry.npmjs.org/mongoose-fakery
96 info trying registry request attempt 1 at 01:19:31
97 http PUT https://registry.npmjs.org/mongoose-fakery
98 http 409 https://registry.npmjs.org/mongoose-fakery
99 verbose url raw mongoose-fakery
100 verbose url resolving [ 'https://registry.npmjs.org/', './mongoose-fakery' ]
101 verbose url resolved https://registry.npmjs.org/mongoose-fakery
102 info trying registry request attempt 1 at 01:19:33
103 http GET https://registry.npmjs.org/mongoose-fakery
104 http 200 https://registry.npmjs.org/mongoose-fakery
105 error publish fail Cannot publish over existing version.
105 error publish fail Update the 'version' field in package.json and try again.
105 error publish fail
105 error publish fail If the previous version was published in error, see:
105 error publish fail     npm help unpublish
105 error publish fail
105 error publish fail To automatically increment version numbers, see:
105 error publish fail     npm help version
106 error System Darwin 11.2.0
107 error command "node" "/usr/local/bin/npm" "publish"
108 error cwd /Users/alexis/work/mongoose-fakery
109 error node -v v0.8.20
110 error npm -v 1.2.11
111 error code EPUBLISHCONFLICT
112 verbose exit [ 1, true ]
